1
00:00:00,000 --> 00:00:07,000
By now, you have quite a lot of knowledge of Swing and should be able to build a very nice GUI application,

2
00:00:07,000 --> 00:00:13,000
but most applications require some kind of interaction with a database.

3
00:00:13,000 --> 00:00:19,000
Let's use our existing GUI form ContactsTableGUI to display the data.

4
00:00:19,000 --> 00:00:25,000
We can add an Insert button here at the bottom to insert records, then we can allow the user to simply click

5
00:00:25,000 --> 00:00:34,000
on a row of the table, which will pop up our GridBagGUI form to allow updating or deleting records.

6
00:00:34,000 --> 00:00:41,000
I have written a class called DBManager that will do most of the work and we will step through that code to

7
00:00:41,000 --> 00:00:48,000
familiarize you with it first, then move on to controlling it from the GUI classes.

8
00:00:48,000 --> 00:00:55,000
In the last module, I neglected to add the derbyclient.jar directly into the application.

9
00:00:55,000 --> 00:01:00,000
This jar is necessary to provide network communication with the Java DB server.

10
00:01:00,000 --> 00:01:10,000
To add it, right-click the GridBagProject and select Properties, then click Libraries, then Add JAR/Folder.

11
00:01:10,000 --> 00:01:15,000
You will need to point to the directory where derbyclient.jar lives.

12
00:01:15,000 --> 00:01:25,000
If you use the Java DB included in the JDK installation, it lives in the jdk folder /db/lib.

13
00:01:25,000 --> 00:01:31,000
Click on the derbyclient.jar and click OK, then click OK once again.

14
00:01:31,000 --> 00:01:41,000
Now let's look at the DBManager class. I'm using the Java Persistence API, or JPA, to make interaction with

15
00:01:41,000 --> 00:01:51,000
the database much easier. JPA is an Object Relational Mapping, or ORM, meaning that you as a developer only

16
00:01:51,000 --> 00:01:58,000
need to deal with objects to interact with a database and don't need to use SQL.

17
00:01:58,000 --> 00:02:07,000
We're actually already using JPA in the Contacts entity bean we generated earlier, so this is a natural extension.

18
00:02:07,000 --> 00:02:14,000
So first of all, it's necessary to import these three classes to use JPA - the EntityManager,

19
00:02:14,000 --> 00:02:28,000
the EntityManagerFactory, and Persistence. I created variables here for an EntityManagerFactory and an EntityManager.

20
00:02:28,000 --> 00:02:35,000
So in the default constructor for DBManager, I created an instance of EntityManagerFactory,

21
00:02:35,000 --> 00:02:43,000
then created an instance of EntityManager. Every time we perform an insert on the database,

22
00:02:43,000 --> 00:02:50,000
this constructor will be called first, then when the insert is complete, we will call the Close method to

23
00:02:50,000 --> 00:02:58,000
clean up those instances. I have a second constructor here to be used when we want to either update or

24
00:02:58,000 --> 00:03:06,000
delete a record in the database. This constructor takes a Contacts bean object as an argument,

25
00:03:06,000 --> 00:03:17,000
which contains the record we want to either update or delete. Next is an Insert method we will use to create

26
00:03:17,000 --> 00:03:25,000
a new record in the database. When the user fills out the form, we will assign each of the field's first

27
00:03:25,000 --> 00:03:31,000
name, last name, street, and city to an instance of the Contacts bean.

28
00:03:31,000 --> 00:03:38,000
Then JPA just uses that object to persist in the database, and creates a new row.

29
00:03:38,000 --> 00:03:45,000
Not much code necessary. Next, we'll need this findById method.

30
00:03:45,000 --> 00:03:52,000
When the user clicks on a row in the contacts table, we will need to find that record and display its properties

31
00:03:52,000 --> 00:03:59,000
in the GUI form. Then the user will have two options, either update or delete the record.

32
00:03:59,000 --> 00:04:09,000
Again, the form will pass a Contacts object with those values either to the Update or Delete methods here.

33
00:04:09,000 --> 00:04:15,000
JPA may be a new concept to some of you, but I think you can see that it is very easy for the developer to

34
00:04:15,000 --> 00:04:21,000
write methods to interact with the database, and that's the whole point.

35
00:04:21,000 --> 00:04:27,000
You may have heard of other object relational mapping systems, such as Hibernate or TopLink.

36
00:04:27,000 --> 00:04:33,000
JPA is a subset of these and several others. Now there's one more thing we'll need to take care of.

37
00:04:33,000 --> 00:04:41,000
As I mentioned, the Contacts entity bean already makes use of JPA, but we'll need to make a few alterations.

38
00:04:41,000 --> 00:04:50,000
So let's open the Contacts class and have a look. As you see, some of the persistence classes are already imported.

39
00:04:50,000 --> 00:04:57,000
One problem we're going to have is that when we previously entered records manually into the database,

40
00:04:57,000 --> 00:05:05,000
we just entered a primary key directly. Now that we are using code to insert records, we will need some kind of

41
00:05:05,000 --> 00:05:15,000
number generator to generate unique primary key values. No worries, JPA and Java DB already have one included.

42
00:05:15,000 --> 00:05:21,000
JPA makes use of a type of code in entity beans called annotations.

43
00:05:21,000 --> 00:05:27,000
Here you see this class being declared as an Entity with this annotation.

44
00:05:27,000 --> 00:05:34,000
To create a number sequence generator, we will need to add another annotation on the next line,

45
00:05:34,000 --> 00:05:51,000
@SequenceGenerator name=seq initialValue=5. We already have four records in the database using primary keys

46
00:05:51,000 --> 00:05:58,000
one through four, so this will start counting at five and above.

47
00:05:58,000 --> 00:06:06,000
We have an error flag here because we need to add the import for a sequence generator.

48
00:06:06,000 --> 00:06:14,000
Only one more thing to do. We'll need to replace these two annotations here with a new one,

49
00:06:14,000 --> 00:06:36,000
@GeneratedValue strategy=GenerationType.SEQUENCE, generator=seq.

50
00:06:36,000 --> 00:06:45,000
This ensures that the ID field is auto-generated. We'll need to add imports for both generated value and

51
00:06:45,000 --> 00:59:00,000
generated type, and that's all there is to it. All we need to do now is alter our GUI classes a bit.

